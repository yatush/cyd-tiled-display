substitutions:
  device_name: "monitor"
  friendly_name: Monitor

packages:
  device_base: !include lib/device_base.yaml

esphome:
  name: $device_name
  friendly_name: $friendly_name

# https://esphome.io/components/api.html#configuration-variables
api:
  encryption: 
    key: "CHANGE_THIS_ACCORDING_TO_THE_ABOVE_URL"

script:
  # The elements that appear in the UI
  - id: init_tiles
    then:
      - lambda: |-
          view = new View({
            new TiledScreen(
              id(controllers), {BASE},
              {
                (new HAActionTile(0, 0, { id(tile_lights) }, { id(action_lights) }, { "#{LIGHT}"}))->setDisplayPageIfNoEntity(id(light_settings)),
                new HAActionTile(1, 0, { id(tile_ac) }, { id(action_ac) }, { "$AC_1_ID" }),
                new MovePageTile(2, 0, { id(tile_settings) }, id(pref)),
                (new HAActionTile(0, 1, { id(tile_blinds_up) }, { id(action_blinds_up) }, { "#{COVER}" }))
                  ->setRequiresFastRefreshFunc([]() { return id(blinds_moving_up) || id(blinds_moving_down); })
                  ->setDisplayPageIfNoEntity(id(cover_settings)),
                (new HAActionTile(1, 1, { id(tile_blinds_down) }, { id(action_blinds_down) }, { "#{COVER}" }))
                  ->setRequiresFastRefreshFunc([]() { return id(blinds_moving_up) || id(blinds_moving_down); })
                  ->setDisplayPageIfNoEntity(id(cover_settings)),
                (new HAActionTile(2, 1, { id(tile_blinds_mid) }, { id(action_blinds_mid) }, { "#{COVER}"}))
                  ->setDisplayPageIfNoEntity(id(cover_settings)),
              }
            ),
            new TiledScreen(
              id(pref), {TEMPORARY},
              {
                new MovePageTile(0, 0, { id(tile_disp_settings) }, id(disp_settings)),                
                new MovePageTile(1, 0, { id(tile_light_settings) }, id(light_settings)),
                new MovePageTile(2, 0, { id(tile_back_arrow) }, id(controllers)),
                (new MovePageTile(0, 1, { id(tile_ac_settings) }, id(ac_settings)))->setDynamicEntry("AC", { "$AC_1_ID" }),
                new MovePageTile(1, 1, { id(tile_cover_settings) }, id(cover_settings)),
              }
            ),
            new TiledScreen(
              id(ac_settings), {TEMPORARY},
              {
                new HAActionTile(0, 0, { id(tile_temp_up) }, { id(action_temp_up) }, { "#{AC}|temperature" }),
                new HAActionTile(0, 1, { id(tile_temp_down) }, { id(action_temp_down) }, { "#{AC}|temperature" }),
                new HAActionTile(1, 0, { id(tile_ac_mode) }, { id(action_ac_mode) }, { "#{AC}" }),
                (new TitleTile(1, 1, { id(tile_ac_status) }, { "#{AC}", "#{AC}|temperature" }))->omitFrame(),
                new MovePageTile(2, 0, { id(tile_back_arrow) }, id(controllers)),
              }
            ),
            new TiledScreen(
              id(disp_settings), {FAST_REFRESH, TEMPORARY},
              {
                new FunctionTile(0, 0, { id(tile_brightness) }, id(on_brightness_press), id(on_brightness_release)),
                new FunctionTile(1, 0, { id(tile_distance) }, id(change_wakeup_distance)),
                new MovePageTile(2, 0, { id(tile_back_arrow) }, id(controllers)),
                new FunctionTile(0, 1, { id(tile_wakeup_time) }, id(change_sleep_time)),
              }
            ),
            new TiledScreen(
              id(light_settings), {TEMPORARY},
              {
                new ToggleEntityTile(0, 0, { id(tile_choose_light) }, "LIGHT", "$LIGHT_1_ID", "Closet", true),
                new ToggleEntityTile(1, 0, { id(tile_choose_light) }, "LIGHT", "$LIGHT_2_ID", "Ceiling"),
                new ToggleEntityTile(0, 1, { id(tile_choose_light) }, "LIGHT", "$LIGHT_3_ID", "Comp"),
                new ToggleEntityTile(1, 1, { id(tile_choose_light) }, "LIGHT", "$LIGHT_4_ID", "Bed"),
                new MovePageTile(2, 0, { id(tile_back_arrow) }, id(controllers)),
              }
            ),
            new TiledScreen(
              id(cover_settings), {TEMPORARY},
              {
                new ToggleEntityTile(0, 0, { id(tile_choose_cover) }, "COVER", "$COVER_1_ID", "PR1", true),
                new ToggleEntityTile(0, 1, { id(tile_choose_cover) }, "COVER", "$COVER_2_ID", "PR2", true),
                new MovePageTile(2, 0, { id(tile_back_arrow) }, id(controllers)),
              }
            ),
          });
